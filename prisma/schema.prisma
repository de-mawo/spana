// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?    @default("https://res.cloudinary.com/demawo/image/upload/v1674075785/avatar_vehl5k.png")
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(USER)
  leave         Balances[]

  // Use the below fields only if passwords are required in the future
  password                String?
  //TODO: Remove the isVerified if email Verified Works
  isVerified              Boolean?  @default(false)
  activateAccToken        String?
  activateAccTokenExpires DateTime?
  passwordResetToken      String?
  passwordResetExpires    DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum LeaveType {
  ANNUAL
  HEALTH
  STUDY
  MATERNITY
  UNPAID
  FAMILY
  PATERNITY
}

model Leave {
  id             String   @id @default(cuid())
  type           LeaveType
  startDate      DateTime
  endDate        DateTime
  daysRequested  Float
  requestedAt    DateTime @default(now())
  requestedBy    String
  requesterNote  String?
  requesterEmail String
  approved       Boolean  @default(false)
  rejected       Boolean  @default(false)
  moderatedBy    String   @default("null")
  moderatorNote  String   @default("")
}

model AddDays {
  id             String   @id @default(cuid())
  type           String
  daysRequested  Float
  requestedAt    DateTime @default(now())
  requestedBy    String
  requesterNote  String?
  requesterEmail String
  approved       Boolean  @default(false)
  rejected       Boolean  @default(false)
  moderatedBy    String   @default("null")
  moderatorNote  String   @default("")
}

model Balances {
  id                 String @id @default(cuid())
  annualCredit       Float  @default(0)
  annualUsed         Float  @default(0)
  annualRemaining    Float  @default(0)
  healthCredit       Float  @default(0)
  healthUsed         Float  @default(0)
  healthRemaining    Float  @default(0)
  studyCredit        Float  @default(0)
  studyUsed          Float  @default(0)
  studyRemaining     Float  @default(0)
  maternityCredit    Float  @default(0)
  maternityUsed      Float  @default(0)
  maternityRemaining Float  @default(0)
  familyCredit       Float  @default(0)
  familyUsed         Float  @default(0)
  familyRemaining    Float  @default(0)
  paternityCredit    Float  @default(0)
  paternityUsed      Float  @default(0)
  paternityRemaining Float  @default(0)
  unpaidUsed         Float  @default(0)
  userId             String
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
